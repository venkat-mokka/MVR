// <auto-generated />
using System;
using DMLAutomationProcess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMLAutomationProcess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240830141147_InitialContext")]
    partial class InitialContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DMLAutomationProcess.Models.BloodGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.ContactDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BloodGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Caste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HusbandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdProofID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmergencyCase")
                        .HasColumnType("bit");

                    b.Property<int?>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("OPRegistrationID")
                        .HasColumnType("int");

                    b.Property<string>("RefBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReligionID")
                        .HasColumnType("int");

                    b.Property<int?>("VillageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("IdProofID");

                    b.HasIndex("MaritalStatusID");

                    b.HasIndex("OPRegistrationID");

                    b.HasIndex("ReligionID");

                    b.HasIndex("VillageID");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StateID");

                    b.ToTable("Countrys");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.District", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MandalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MandalID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.FeeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FeeTypes");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.IdProof", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IdProofs");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Mandal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VillageID");

                    b.ToTable("Mandals");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.MaritalStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MaritalStatuss");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.OPRegistration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<long?>("AadhaarNo")
                        .HasMaxLength(12)
                        .HasColumnType("bigint");

                    b.Property<long?>("AbhaNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeeTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMlcCase")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OPID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PatientTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PrefixID")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityID")
                        .HasColumnType("int");

                    b.Property<string>("UHID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("VisitDate")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<int?>("YearID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("FeeTypeID");

                    b.HasIndex("PatientTypeID");

                    b.HasIndex("PrefixID");

                    b.HasIndex("SpecialityID");

                    b.HasIndex("YearID");

                    b.ToTable("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.PatientType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PatientTypes");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Prefix", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.ToTable("Prefixs");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Religion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Speciality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UnitsID");

                    b.ToTable("Specialitys");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Unit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Village", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Year", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.ContactDetail", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.BloodGroup", "BloodGroups")
                        .WithMany("ContactDetails")
                        .HasForeignKey("BloodGroupID");

                    b.HasOne("DMLAutomationProcess.Models.IdProof", "IdProofs")
                        .WithMany("ContactDetails")
                        .HasForeignKey("IdProofID");

                    b.HasOne("DMLAutomationProcess.Models.MaritalStatus", "MaritalStatuss")
                        .WithMany("ContactDetails")
                        .HasForeignKey("MaritalStatusID");

                    b.HasOne("DMLAutomationProcess.Models.OPRegistration", "OPRegistrations")
                        .WithMany("ContactDetails")
                        .HasForeignKey("OPRegistrationID");

                    b.HasOne("DMLAutomationProcess.Models.Religion", "Religions")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ReligionID");

                    b.HasOne("DMLAutomationProcess.Models.Village", "Villages")
                        .WithMany("ContactDetails")
                        .HasForeignKey("VillageID");

                    b.Navigation("BloodGroups");

                    b.Navigation("IdProofs");

                    b.Navigation("MaritalStatuss");

                    b.Navigation("OPRegistrations");

                    b.Navigation("Religions");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Country", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.State", "States")
                        .WithMany("Countrys")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("States");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.District", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.Mandal", "Mandals")
                        .WithMany("Districts")
                        .HasForeignKey("MandalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mandals");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Mandal", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.Village", "Villages")
                        .WithMany("Mandals")
                        .HasForeignKey("VillageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.OPRegistration", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.Department", "Departments")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("DMLAutomationProcess.Models.Doctor", "Doctors")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("DoctorID");

                    b.HasOne("DMLAutomationProcess.Models.FeeType", "FeeTypes")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("FeeTypeID");

                    b.HasOne("DMLAutomationProcess.Models.PatientType", "PatientTypes")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("PatientTypeID");

                    b.HasOne("DMLAutomationProcess.Models.Prefix", "Prefixs")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("PrefixID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Models.Speciality", "Specialitys")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("SpecialityID");

                    b.HasOne("DMLAutomationProcess.Models.Year", "Years")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("YearID");

                    b.Navigation("Departments");

                    b.Navigation("Doctors");

                    b.Navigation("FeeTypes");

                    b.Navigation("PatientTypes");

                    b.Navigation("Prefixs");

                    b.Navigation("Specialitys");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Prefix", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.Gender", "Genders")
                        .WithMany("Prefixs")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genders");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Speciality", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.Unit", "Units")
                        .WithMany("Specialitys")
                        .HasForeignKey("UnitsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Units");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.State", b =>
                {
                    b.HasOne("DMLAutomationProcess.Models.District", "Districts")
                        .WithMany("States")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.BloodGroup", b =>
                {
                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Department", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.District", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Doctor", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.FeeType", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Gender", b =>
                {
                    b.Navigation("Prefixs");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.IdProof", b =>
                {
                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Mandal", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.MaritalStatus", b =>
                {
                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.OPRegistration", b =>
                {
                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.PatientType", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Prefix", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Religion", b =>
                {
                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Speciality", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.State", b =>
                {
                    b.Navigation("Countrys");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Unit", b =>
                {
                    b.Navigation("Specialitys");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Village", b =>
                {
                    b.Navigation("ContactDetails");

                    b.Navigation("Mandals");
                });

            modelBuilder.Entity("DMLAutomationProcess.Models.Year", b =>
                {
                    b.Navigation("OPRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
