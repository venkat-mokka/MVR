// <auto-generated />
using System;
using DMLAutomationProcess.Infra.Dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMLAutomationProcess.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240920062959_InitialContext")]
    partial class InitialContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.AgeType", b =>
                {
                    b.Property<int>("AgeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgeTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AgeTypeID");

                    b.ToTable("AgeType");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodGroupID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BloodGroupID");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.DaywiseSchedule", b =>
                {
                    b.Property<int>("DayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DayID");

                    b.ToTable("DaywiseSchedule");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.DepartmentDayUnitMapping", b =>
                {
                    b.Property<int>("DepartmentDayUnitMappingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentDayUnitMappingID"));

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentDayUnitMappingID");

                    b.HasIndex("DayID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("UnitID");

                    b.ToTable("DepartmentDayUnitMapping");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.HasKey("DistrictID");

                    b.HasIndex("StateID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.FeeType", b =>
                {
                    b.Property<int>("FeeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FeeTypeID");

                    b.ToTable("FeeType");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenderID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.IDProofType", b =>
                {
                    b.Property<int>("IDProofTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDProofTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDProofTypeID");

                    b.ToTable("IDProofType");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Mandal", b =>
                {
                    b.Property<int>("MandalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MandalID"));

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MandalID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Mandal");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaritalStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaritalStatusID");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.OPRegistration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int?>("FeeTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCamp")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmergencyCase")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMlcCase")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsType")
                        .HasColumnType("bit");

                    b.Property<string>("OPID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SpecialityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("FeeTypeID");

                    b.HasIndex("PatientID");

                    b.HasIndex("SpecialityID");

                    b.ToTable("OPRegistration");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<long?>("AadhaarNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("AbhaNo")
                        .HasColumnType("bigint");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AgeTypeID")
                        .HasColumnType("int");

                    b.Property<long?>("AlternateMobileNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("BloodGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Caste")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("HusbandName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IDProof")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IDProofTypeID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("PatientTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PrefixID")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionID")
                        .HasColumnType("int");

                    b.Property<string>("UHID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("VillageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AgeTypeID");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("GenderID");

                    b.HasIndex("IDProofTypeID");

                    b.HasIndex("MaritalStatusID");

                    b.HasIndex("PatientTypeID");

                    b.HasIndex("PrefixID");

                    b.HasIndex("ReligionID");

                    b.HasIndex("VillageID");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.PatientAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mandal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientAddress");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.PatientType", b =>
                {
                    b.Property<int>("PatientTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientTypeID");

                    b.ToTable("PatientType");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Prefix", b =>
                {
                    b.Property<int>("PrefixID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrefixID"));

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrefixID");

                    b.HasIndex("GenderID");

                    b.ToTable("Prefix");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Religion", b =>
                {
                    b.Property<int>("ReligionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReligionID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReligionID");

                    b.ToTable("Religion");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Speciality", b =>
                {
                    b.Property<int>("SpecialityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecialityID");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StateID");

                    b.ToTable("State");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("UnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnitID");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.UnitDoctorMapping", b =>
                {
                    b.Property<int>("UnitDoctorMappingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitDoctorMappingID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.HasKey("UnitDoctorMappingID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("UnitID");

                    b.ToTable("UnitDoctorMapping");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Village", b =>
                {
                    b.Property<int>("VillageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VillageID"));

                    b.Property<int>("MandalID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.HasKey("VillageID");

                    b.HasIndex("MandalID");

                    b.ToTable("Village");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.DepartmentDayUnitMapping", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.DaywiseSchedule", "DaywiseSchedules")
                        .WithMany("DepartmentDayUnitMappings")
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Department", "Departments")
                        .WithMany("DepartmentDayUnitMappings")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Unit", "Units")
                        .WithMany("DepartmentDayUnitMappings")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DaywiseSchedules");

                    b.Navigation("Departments");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.District", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.State", "State")
                        .WithMany("Districts")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Mandal", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.District", "District")
                        .WithMany("Mandals")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.OPRegistration", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.Department", "Department")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Doctor", "Doctor")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("DoctorID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.FeeType", "FeeType")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("FeeTypeID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Speciality", "Speciality")
                        .WithMany("OPRegistrations")
                        .HasForeignKey("SpecialityID");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("FeeType");

                    b.Navigation("Patient");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Patient", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.AgeType", "AgeType")
                        .WithMany("Patients")
                        .HasForeignKey("AgeTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("Patients")
                        .HasForeignKey("BloodGroupID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.IDProofType", "IDProofType")
                        .WithMany("Patients")
                        .HasForeignKey("IDProofTypeID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("Patients")
                        .HasForeignKey("MaritalStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.PatientType", "PatientType")
                        .WithMany("Patients")
                        .HasForeignKey("PatientTypeID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Prefix", "Prefix")
                        .WithMany("Patients")
                        .HasForeignKey("PrefixID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Religion", "Religion")
                        .WithMany("Patients")
                        .HasForeignKey("ReligionID");

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Village", "Village")
                        .WithMany("Patients")
                        .HasForeignKey("VillageID");

                    b.Navigation("AgeType");

                    b.Navigation("BloodGroup");

                    b.Navigation("Gender");

                    b.Navigation("IDProofType");

                    b.Navigation("MaritalStatus");

                    b.Navigation("PatientType");

                    b.Navigation("Prefix");

                    b.Navigation("Religion");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.PatientAddress", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Prefix", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.Gender", "Gender")
                        .WithMany("Prefixes")
                        .HasForeignKey("GenderID");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.UnitDoctorMapping", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.Doctor", "Doctors")
                        .WithMany("UnitDoctorMappings")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMLAutomationProcess.Domain.Entities.Unit", "Units")
                        .WithMany("UnitDoctorMappings")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Village", b =>
                {
                    b.HasOne("DMLAutomationProcess.Domain.Entities.Mandal", "Mandal")
                        .WithMany("Villages")
                        .HasForeignKey("MandalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mandal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.AgeType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.BloodGroup", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.DaywiseSchedule", b =>
                {
                    b.Navigation("DepartmentDayUnitMappings");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Department", b =>
                {
                    b.Navigation("DepartmentDayUnitMappings");

                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.District", b =>
                {
                    b.Navigation("Mandals");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("OPRegistrations");

                    b.Navigation("UnitDoctorMappings");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.FeeType", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Prefixes");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.IDProofType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Mandal", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.PatientType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Prefix", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Religion", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Speciality", b =>
                {
                    b.Navigation("OPRegistrations");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.State", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Unit", b =>
                {
                    b.Navigation("DepartmentDayUnitMappings");

                    b.Navigation("UnitDoctorMappings");
                });

            modelBuilder.Entity("DMLAutomationProcess.Domain.Entities.Village", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
